import re
import bs4
import time
import gspread
import easyimap
import requests
import numpy as np
import pandas as pd
from collections import OrderedDict
import datetime

from oauth2client.service_account import ServiceAccountCredentials

scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('client_secret.json', scope)
client = gspread.authorize(creds)


def get_symbols_email(user,password,host = 'imap.gmail.com', mailbox = "INBOX"):
    imapper = easyimap.connect(host,user,password,mailbox)


    unseen_emails = imapper.unseen()

    symbols_list = []
    for i in unseen_emails:
        if i.title == 'symbols':
            symbols_list.append([i.body])
        else:
            print i.title

    return symbols_list


def split_symbols(block_of_text):
    for sublist in range(len(block_of_text)):
        for block in block_of_text[sublist][0].splitlines():
            for individual_symbol in re.split(r''',|''',block):
                for syms in individual_symbol.split():
                    yield syms

def flatten(container):
    flattened_list  = []
    for thing in container:
        if isinstance(thing, (list,tuple)):
            for subthing in flatten(thing):
                flattened_list.append(subthing)
        else:
            flattened_list.append(thing)
    return flattened_list

def get_shiller(symbols):
    shiller = OrderedDict()
    for i in symbols:
        time.sleep(10)
        try:
            page = requests.get("http://www.gurufocus.com/term/ShillerPE/%s/Shiller-PE-Ratio/"%i)
            soup = bs4.BeautifulSoup(page.text,'lxml')
            shiller[str(i)] = float(re.findall(r'''\d+\.\d+''',str(soup.find_all('div',{"class":"data_value"})[0].text))[0])
        except Exception as e:
            print e,'shiller'
            shiller[str(i)] = np.float64('nan')
    return shiller

def get_finviz_data(symbols):
    new_list = symbols
    pages = {}
    finviz = {}
    pages['fails']  =[]
    for i in new_list:
        try:
            finviz[str(i)] = requests.get("https://finviz.com/quote.ashx?t=%s"%i)
            soup = bs4.BeautifulSoup(finviz[str(i)].text,'lxml')
            try:
                company_name = soup.find_all("a",{"class":"tab-link"})[12]
                numbers = soup.find_all('td',{"class":'snapshot-td2'})
                names   = soup.find_all('td',{"class":'snapshot-td2-cp'})
                metrics = ['P/E','PEG','P/B','52W Range','Price']
                finviz[str(i)] = [company_name.text]
                for x in enumerate(names):
                    if names[x[0]].text in metrics:
                        finviz[str(i)].append(numbers[x[0]].text.split())
            except Exception as e:
                del finviz[str(i)]
                new_list.remove(str(i))
                print "%s deleted"%i
                print e,i
                print len(new_list)
        except Exception as e:
            print e,i
            pages['fails'].append(str(i))

    print 'finviz',len(finviz)
    print len(new_list)

    for k,d in finviz.iteritems():
        try:
            d.insert(0,k)
        except Exception as e:
            print e,k


    new = []
    for i in finviz.values():
        new.append(flatten((i)))



    pd.DataFrame(new)
    try:
        master = pd.DataFrame(new)[[0,1,2,3,4,5,7,8]]

        master.columns = ['symbol','name','pe','peg','pb','low','high','price']
        master['shiller']  = pd.Series()
        master['Enterprise/Free Cash Flow'] = pd.Series()
        for i in new_list:
            if i in list(master['symbol']):
                pass
            else:
                print i
                new_list.remove(i)
        print len(master),len(new_list)
        return master,new_list
    except Exception as e:
        print e

def get_fcf(symbol):
    fcf = OrderedDict()
    for i in symbol:
        print i
        time.sleep(5)
        try:
            page = requests.get("http://www.marketwatch.com/investing/stock/%s/financials/cash-flow"%i)
            soup = bs4.BeautifulSoup(page.text,'lxml')
            number = (float(re.findall(r'''\d+\.?\d+''',str(soup.find_all("td",{"class":'valueCell'})[-11].text))[0]))
            letter = re.findall(r'''M|B''',str(soup.find_all("td",{"class":'valueCell'})[-11].text))
            negative = re.findall(r'''\(''',str(soup.find_all("td",{"class":"valueCell"})[-11].text))
        except:
            try:
                number = (float(re.findall(r'''\d+\.?\d+''',str(soup.find_all("td",{"class":'valueCell'})[-12].text))[0]))
                letter = re.findall(r'''M|B''',str(soup.find_all("td",{"class":'valueCell'})[-12].text))
                negative = re.findall(r'''\(''',str(soup.find_all("td",{"class":"valueCell"})[-12].text))
            except Exception as e:
                print e,'fcf'
                number = np.float64('nan')
        try:
            if letter[0] == "B":
                number = number*1000000000
            else:
                number = number*1000000
            if negative:
                fcf[str(i.strip())] = -1*number
            else:
                 fcf[str(i.strip())] = number
        except Exception as e:

            fcf[str(i.strip())] = number
    return fcf.values()

def get_enterprise(symbol):
    enterprise = OrderedDict()
    for i in symbol:
        time.sleep(10)
        try:
            page = requests.get("http://www.gurufocus.com/stock/%s"%i)
            soup = bs4.BeautifulSoup(page.text,'lxml')
            a = soup.find_all("th")[2].text
            number = float(re.findall(r'''\d+\.?\d+''',a)[0])
            multip = str(re.findall(r"""M|B""",a)[0])
            if multip == 'B':
                enterprise[str(i.strip())] = number*1000000000
            else:
                enterprise[str(i.strip())] = number*1000000
            print i,enterprise[str(i.strip())]
            time.sleep(3)
        except Exception as e:
            enterprise[str(i.strip())] = np.float64("nan")
            print i,e,'ente'
    return enterprise.values()

def combine_enter_fcf(symbol):
    try:
        for i in symbol:
            ratio = get_enterprise([i])[0]/get_fcf([i])[0]
            if isinstance(ratio,float):
                yield ratio
            else:
                yield np.float64(0)
    except Exception as e:
        print e,'cef'


def make_dataframe(symbols):
    master,new_symbols = get_finviz_data(symbols)
    for i in new_symbols:
        if i in list(master['symbol']):
            pass
        else:
            print "Missing symbol",i
    print len(master),len(symbols)
    master['Enterprise/Free Cash Flow'] = [i for i in combine_enter_fcf(new_symbols)]
    print master, 'Try2'
    master['shiller'] = get_shiller(new_symbols).values()
    print master , 'Try3'
    return master



def numberToLetters(q):
    q = q - 1
    result = ''
    while q >= 0:
        remain = q % 26
        result = chr(remain+65) + result;
        q = q//26 - 1
    return result

def add_to_sheets(dataframe):
    #add header on dataframe to sheets
    columns = dataframe.columns.values.tolist()
    cell_list = sheet.range("A1:"+numberToLetters(len(columns))+'1')
    for cell in cell_list:
        val = columns[cell.col-1]
        if type(val) is str:
            val = val.decode('utf-8')
        cell.value = val
    sheet.update_cells(cell_list)

    #add data from dataframe to sheets
    num_lines,num_columns = dataframe.shape
    cell_list = sheet.range('A2:'+numberToLetters(num_columns)+str(num_lines+1))
    for cell in cell_list:
        val = dataframe.iloc[cell.row-2,cell.col-1]
        try:
            if type(val) is str:
                val = val.decode('utf-8')
            elif isinstance(val, (int, long, float, complex)):
                # note that we round all numbers
                val = int(round(val))
        except Exception as e:
            print e
        cell.value = val
    sheet.update_cells(cell_list)


# if __name__ == "__main__":
#     attemps = 0

#     while True:
#         try:
#             dataframe = make_dataframe([i for i in (split_symbols(get_symbols_email(user = 'routmanapp@gmail.com',password = "85057047r")))])
#             name_of_sheet =  "Stock Report " + str((datetime.datetime.now()- datetime.timedelta(hours = 5)).strftime('%Y-%m-%d %H:%M'))
#             sheet = client.create(name_of_sheet)
#             sheet.share('yaschaffel@gmail.com',perm_type = 'user',role = 'writer')
#             sheet.share('djz@routmanninvestment.com',perm_type = 'user',role = 'writer')
#             sheet.share('Aron.routman@routmanninvestment.com',perm_type = 'user',role = 'writer')
#             sheet = client.open(name_of_sheet).sheet1
#             add_to_sheets(dataframe)
#             print 'success'
#         except Exception as e:
#             print e
#             attemps += 1
#             print attemps
#         time.sleep(10)
